# -----------------------------------------------------------------------------
#  Copyright (C) 2018 University of Dundee. All rights reserved.
#
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# ------------------------------------------------------------------------------

# This script loads the ROIs saved into OMERO and convert them into ImageJ ROIs
# The rois are then added to the roi manager.
# Use this script in the Scripting Dialog of Fiji (File > New > Script).
# Select Python as language in the Scripting Dialog.
# Error handling is omitted to ease the reading of the script but
# this should be added
# if used in production to make sure the services are closed
# Information can be found at
# https://docs.openmicroscopy.org/latest/omero/developers/Java.html

from java.lang import Long


# OMERO Dependencies
from omero.gateway import Gateway
from omero.gateway import LoginCredentials
from omero.gateway import SecurityContext
from omero.gateway.facility import BrowseFacility
from omero.gateway.facility import ROIFacility
from omero.gateway.model import EllipseData
from omero.gateway.model import LineData
from omero.gateway.model import PointData
from omero.gateway.model import PolylineData
from omero.gateway.model import PolygonData
from omero.gateway.model import RectangleData
from omero.log import SimpleLogger


from ij import IJ
from ij.gui import Line, OvalRoi, PointRoi, PolygonRoi, Roi
from ij.plugin.frame import RoiManager
from ij.process import FloatPolygon


# Setup
# =====

# OMERO Server details
HOST = "outreach.openmicroscopy.org"
PORT = 4064
group_id = "-1"
#  parameters to edit
image_id = "1001"
USERNAME = "username"
PASSWORD = "password"


def open_image_plus(HOST, USERNAME, PASSWORD, PORT, group_id, image_id):
    "Open the image using the Bio-Formats Importer"


    options = """location=[OMERO]
open=[omero:server=%s
user=%s
port=%s
pass=%s
groupID=%s
iid=%s]
 windowless=true """ % (HOST, USERNAME, PORT, PASSWORD, group_id, image_id)
    IJ.runPlugIn("loci.plugins.LociImporter", options)


def connect_to_omero():
    "Connect to OMERO"

    credentials = LoginCredentials()
    credentials.getServer().setHostname(HOST)
    credentials.getServer().setPort(PORT)
    credentials.getUser().setUsername(USERNAME.strip())
    credentials.getUser().setPassword(PASSWORD.strip())
    simpleLogger = SimpleLogger()
    gateway = Gateway(simpleLogger)
    gateway.connect(credentials)
    return gateway


def get_image(gateway, image_id):
    "Load the image"

    browse = gateway.getFacility(BrowseFacility)
    user = gateway.getLoggedInUser()
    ctx = SecurityContext(user.getGroupId())
    return browse.getImage(ctx, Long(image_id))


def get_rois(gateway, image_id):
    "List all rois associated to an Image"

    browse = gateway.getFacility(ROIFacility)
    user = gateway.getLoggedInUser()
    ctx = SecurityContext(user.getGroupId())
    return browse.loadROIs(ctx, image_id)


def format_shape(data, ij_shape):
    "Convert settings e.g. color"
    settings = data.getShapeSettings()
    ij_shape.setStrokeColor(settings.getStroke())
    ij_shape.setFillColor(settings.getFill())
    stroke = settings.getStrokeWidth(None)
    if stroke is not None:
        value = settings.getStrokeWidth(None).getValue()
        if value > 1:
            ij_shape.setStrokeWidth(value)
        else:
            ij_shape.setStrokeWidth(1.1)
    else:  
        ij_shape.setStrokeWidth(2)
    # attach the shape to correct plane
    img = IJ.getImage()
    z = data.getZ()
    c = data.getC()
    t = data.getT()
    if img.getNChannels() == 1 and img.getNSlices() == 1 and t > 0:
        ij_shape.setPosition(t)
    elif img.getNChannels() == 1 and img.getNFrames() == 1 and z > 0:
        ij_shape.setPosition(z)
    elif img.getNSlices() == 1 and img.getNFrames() == 1 and c > 0:
        ij_shape.setPosition(c)
    elif img.isHyperStack():
        if z > 0 and (t < 0 or c < 0):
            ij_shape.setPosition(z)
        elif t > 0 and (z < 0 or c < 0):
            ij_shape.setPosition(t)
        elif z > 0 and t > 0 and c > 0:
            ij_shape.setPosition(c, z, t)


def convert_rectangle(data):
    "Convert a rectangle into an imageJ rectangle"

    shape = Roi(data.getX(), data.getY(), data.getWidth(), data.getHeight())
    format_shape(data, shape)
    return shape


def convert_ellipse(data):
    "Convert an ellipse into an imageJ ellipse"
    width = data.getRadiusX()
    height = data.getRadiusY()
    shape = OvalRoi(data.getX()-width, data.getY()-height, 2*width, 2*height)
    format_shape(data, shape)
    return shape


def convert_point(data):
    "Convert a point into an imageJ point"
    shape = PointRoi(data.getX(), data.getY())
    format_shape(data, shape)
    return shape


def convert_line(data):
    "Convert a line into an imageJ line"
    shape = Line(data.getX1(), data.getY1(), data.getX2(), data.getY2())
    format_shape(data, shape)
    return shape


def convert_polygon_polyline(data, type):
    "Convert a polygon or polyline into an imageJ polygon or polyline"
    points = data.getPoints()
    polygon = FloatPolygon()
    for p in points:
        polygon.addPoint(p.getX(), p.getY())

    shape = PolygonRoi(polygon, type)
    format_shape(data, shape)
    return shape


def convert_omero_rois_to_ij_rois(rois_results):
    "Convert the omero ROI into imageJ ROI"

    output = []
    for roi_result in rois_results:
        rois = roi_result.getROIs()
        for roi in rois:
            iterator = roi.getIterator()
            for s in iterator:
                for shape in s:
                    if isinstance(shape, RectangleData):
                        output.append(convert_rectangle(shape))
                    elif isinstance(shape, EllipseData):
                        output.append(convert_ellipse(shape))
                    elif isinstance(shape, PointData):
                        output.append(convert_point(shape))
                    elif isinstance(shape, LineData):
                        output.append(convert_line(shape))
                    elif isinstance(shape, PolylineData):
                        shape = convert_polygon_polyline(shape, Roi.POLYLINE)
                        output.append(shape)
                    elif isinstance(shape, PolygonData):
                        shape = convert_polygon_polyline(shape, Roi.POLYGON)
                        output.append(shape)
    return output


# Connect to OMERO
gateway = connect_to_omero()

# Retrieve the image
image = get_image(gateway, image_id)

rois = get_rois(gateway, image.getId())
open_image_plus(HOST, USERNAME, PASSWORD, PORT, group_id, image_id)
image = IJ.getImage()
output = convert_omero_rois_to_ij_rois(rois)
manager = RoiManager()
count = 0
for i in output:
    manager.add(image, i, count)
    count = count+1

gateway.disconnect()
