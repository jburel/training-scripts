# -----------------------------------------------------------------------------
#  Copyright (C) 2018 University of Dundee. All rights reserved.
#
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# ------------------------------------------------------------------------------

# This Jython script shows how to load a given plane from OMERO,
# load OMERO rois and add them to the manager and run a ImageJ macro.
# In that script, the analysis is done on behalf of another user by a person
# with more privileges e.g. analyst.
# All planes can be retrieved or only the planes corresponding to a specific timepoint
# More details about restricted privileges can be found at
# https://docs.openmicroscopy.org/latest/omero/sysadmins/restricted-admins.html
# Use this script in the Scripting Dialog of Fiji (File > New > Script).
# Select Python as language in the Scripting Dialog.
# Error handling is omitted to ease the reading of the script but
# this should be added
# if used in production to make sure the services are closed
# Information can be found at
# https://docs.openmicroscopy.org/latest/omero/developers/Java.html


from java.lang import Float
from java.lang import Long
from java.lang import System
from java.lang import Math
from java.util import ArrayList
from jarray import zeros


# OMERO Dependencies
from omero.gateway import Gateway
from omero.gateway import LoginCredentials
from omero.gateway import SecurityContext
from omero.gateway.facility import BrowseFacility
from omero.gateway.facility import AdminFacility
from omero.gateway.facility import ROIFacility
from omero.gateway.model import EllipseData
from omero.gateway.model import LineData
from omero.gateway.model import PointData
from omero.gateway.model import PolylineData
from omero.gateway.model import PolygonData
from omero.gateway.model import RectangleData
from omero.log import SimpleLogger


from loci.formats import FormatTools, ImageTools
from loci.common import DataTools

from ij.gui import Line, OvalRoi, PointRoi, PolygonRoi, Roi
from ij import IJ, ImagePlus, ImageStack
from ij.process import ByteProcessor, ShortProcessor
from ij.plugin.frame import RoiManager
from ij.process import FloatPolygon


# Setup
# =====

# OMERO Server details
HOST = "outreach.openmicroscopy.org"
PORT = 4064
group_id = -1
#  parameters to edit
dataset_id = 51
USERNAME = "username"
PASSWORD = "password"
# If you want to do analysis for someone else,
# specify their username
target_user = ""
selected_t = -1

def connect_to_omero():
    "Connect to OMERO. Returns a reference to the gateway"

    credentials = LoginCredentials()
    credentials.getServer().setHostname(HOST)
    credentials.getServer().setPort(PORT)
    credentials.getUser().setUsername(USERNAME.strip())
    credentials.getUser().setPassword(PASSWORD.strip())
    simpleLogger = SimpleLogger()
    gateway = Gateway(simpleLogger)

    user = gateway.connect(credentials)
    print user.getGroupId()
    return gateway


def get_images(gateway, ctx, dataset_id):
    "List all image's ids contained in a Dataset"

    browse = gateway.getFacility(BrowseFacility)
    ctx = switch_security_context(ctx, target_user)

    ids = ArrayList(1)
    val = Long(dataset_id)
    ids.add(val)
    return browse.getImagesForDatasets(ctx, ids)


def switch_security_context(ctx, target_user):
    "Switch security context"
    if not target_user:
        target_user = USERNAME
    service = gateway.getFacility(AdminFacility)
    user = service.lookupExperimenter(ctx, target_user)
    ctx = SecurityContext(user.getGroupId())
    ctx.setExperimenter(user)
    return ctx


# Convert omero Image object as ImageJ ImagePlus object
# (An alternative to OmeroReader)
def open_omero_image(ctx, image_id, value):
    browse = gateway.getFacility(BrowseFacility)
    print image_id
    image = browse.getImage(ctx, long(image_id))
    pixels = image.getDefaultPixels()
    size_z = pixels.getSizeZ()
    size_t = pixels.getSizeT()
    size_c = pixels.getSizeC()
    size_x = pixels.getSizeX()
    size_y = pixels.getSizeY()
    pixtype = pixels.getPixelType()
    pixels_type = FormatTools.pixelTypeFromString(pixtype)
    bpp = FormatTools.getBytesPerPixel(pixels_type)
    is_signed = FormatTools.isSigned(pixels_type)
    is_float = FormatTools.isFloatingPoint(pixels_type)
    is_little = False
    interleave = False
    store = gateway.getPixelsStore(ctx)
    pixels_id = pixels.getId()
    store.setPixelsId(pixels_id, False)
    stack = ImageStack(size_x, size_y)
    start = 0
    end = size_t
    dimension = size_t
    if value >= 0:
        start = value
        end = value + 1
        dimension = 1
    elif value >= size_t:
        start = value - 1
        end = value
        dimension = 1

    for t in range(start, end):
        for z in range(0, size_z):
            for c in range(0, size_c):
                plane = store.getPlane(z, c, t)

                ImageTools.splitChannels(plane, 0, 1, bpp, False, interleave)
                pixels = DataTools.makeDataArray(plane, bpp, is_float, is_little)

                q = pixels
                if len(plane) != size_x*size_y:
                    tmp = q
                    q = zeros(size_x*size_y, 'h')
                    System.arraycopy(tmp, 0, q, 0, Math.min(len(q), len(tmp)))
                    if is_signed:
                        q = DataTools.makeSigned(q)
                if q.typecode == 'b':
                    ip = ByteProcessor(size_x, size_y, q, None)
                elif q.typecode == 'h':
                    ip = ShortProcessor(size_x, size_y, q, None)
                stack.addSlice('', ip)
    store.close()
    # Do something
    image_name = image.getName() + '--OMERO ID:' + str(image.getId())
    imp = ImagePlus(image_name, stack)
    imp.setDimensions(size_c, size_z, dimension)
    imp.setOpenAsHyperStack(True)
    imp.show()
    return imp


def get_rois(gateway, image_id):
    "List all rois associated to an Image"

    browse = gateway.getFacility(ROIFacility)
    user = gateway.getLoggedInUser()
    ctx = SecurityContext(user.getGroupId())
    return browse.loadROIs(ctx, image_id)


def format_shape(data, ij_shape):
    "Convert settings e.g. color"
    settings = data.getShapeSettings()
    ij_shape.setStrokeColor(settings.getStroke())
    stroke = settings.getStrokeWidth(None)
    if stroke is not None:
        value = settings.getStrokeWidth(None).getValue()
        ij_shape.setStrokeWidth(Float(value))
    else:
        ij_shape.setStrokeWidth(Float(1))
    # attach the shape to the plane
    img = IJ.getImage()
    z = data.getZ()
    c = data.getC()
    t = data.getT()
    if z >= 0:
        z = z+1
    if t >= 0:
        t = t+1
    if c >= 0:
        c = c+1
    if img.getNChannels() == 1 and img.getNSlices() == 1 and t > 0:
        ij_shape.setPosition(t)
    elif img.getNChannels() == 1 and img.getNFrames() == 1 and z > 0:
        ij_shape.setPosition(z)
    elif img.getNSlices() == 1 and img.getNFrames() == 1 and c > 0:
        ij_shape.setPosition(c)
    elif img.isHyperStack():
        ij_shape.setPosition(c, z, t)


def convert_rectangle(data):
    "Convert a rectangle into an imageJ rectangle"

    shape = Roi(data.getX(), data.getY(), data.getWidth(), data.getHeight())
    format_shape(data, shape)
    return shape


def convert_ellipse(data):
    "Convert an ellipse into an imageJ ellipse"
    width = data.getRadiusX()
    height = data.getRadiusY()
    shape = OvalRoi(data.getX()-width, data.getY()-height, 2*width, 2*height)
    format_shape(data, shape)
    return shape


def convert_point(data):
    "Convert a point into an imageJ point"
    shape = PointRoi(data.getX(), data.getY())
    format_shape(data, shape)
    return shape


def convert_line(data):
    "Convert a line into an imageJ line"
    shape = Line(data.getX1(), data.getY1(), data.getX2(), data.getY2())
    format_shape(data, shape)
    return shape


def convert_polygon_polyline(data, type):
    "Convert a polygon or polyline into an imageJ polygon or polyline"
    points = data.getPoints()
    polygon = FloatPolygon()
    for p in points:
        polygon.addPoint(p.getX(), p.getY())

    shape = PolygonRoi(polygon, type)
    format_shape(data, shape)
    return shape


def convert_omero_rois_to_ij_rois(rois_results, t):
    "Convert the omero ROI into imageJ ROI"

    output = []
    for roi_result in rois_results:
        rois = roi_result.getROIs()
        for roi in rois:
            iterator = roi.getIterator()
            for s in iterator:
                for shape in s:
                    if (shape.getT() < 0 or t < 0 or shape.getT() == t):
                        if isinstance(shape, RectangleData):
                            output.append(convert_rectangle(shape))
                        elif isinstance(shape, EllipseData):
                            output.append(convert_ellipse(shape))
                        elif isinstance(shape, PointData):
                            output.append(convert_point(shape))
                        elif isinstance(shape, LineData):
                            output.append(convert_line(shape))
                        elif isinstance(shape, PolylineData):
                            shape = convert_polygon_polyline(shape, Roi.POLYLINE)
                            output.append(shape)
                        elif isinstance(shape, PolygonData):
                            shape = convert_polygon_polyline(shape, Roi.POLYGON)
                            output.append(shape)
    return output


# Prototype analysis example
gateway = connect_to_omero()
ctx = SecurityContext(group_id)
exp = gateway.getLoggedInUser()
exp_id = exp.getId()

# get all images in an omero dataset
images = get_images(gateway, ctx, dataset_id)

# if target_user ~= None:
# Switch context to target user and open omeroImage as ImagePlus object
ctx = switch_security_context(ctx, target_user)

for img in images:
    # if target_user ~= None:
    # Switch context to target user and open omeroImage as ImagePlus object
    img_id = img.getId()
    imp = open_omero_image(ctx, img_id, selected_t)
    imp = IJ.getImage()
    # Initialize the ROI manager
    rm = RoiManager()
    # load the OMERO ROIs linked to a given image and add them to the manager
    rois = get_rois(gateway, img_id)
    output = convert_omero_rois_to_ij_rois(rois, selected_t)
    count = 0
    for i in output:
        rm.add(imp, i, count)
        count = count+1
    # Run Macro:
    # IJ.run("Enhance Contrast...", "saturated=0.3")
    # or
    # IJ.runMacroFile("/path/to/Macrofile")
    # Close the various components
    IJ.selectWindow("ROI Manager")
    IJ.run("Close")
    imp.changes = False     # Prevent "Save Changes?" dialog
    imp.close()

# Close the connection
gateway.disconnect()
print "processing done"
